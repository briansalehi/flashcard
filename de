#!/usr/bin/env bash

keyword="$*"
buffer="$(mktemp)" || exit 1
share=$HOME/.local/share/flashcard
notefile=$share/notes
keywords=$share/keywords
practices=$share/practices.csv
grammars=$share/grammars

random_sequence() {
    local max="${1:-1}"
    local random
    local index
    local -a sequence

    for index in $(seq 1 "$max")
    do
        random="$((RANDOM % max))"
        while grep -wq "$random" <<< "${sequence[*]}"
        do
            random="$((RANDOM % max))"
        done
        sequence["$index"]="$random"
    done

    echo "${sequence[*]}"
}

lookup_noun() {
    local noun
    local phonetic
    local exact_match
    local plural

    noun="$(sed -n '/entity-anchor/,+1s/\s*\(.*\)\s*/\1/p' "$buffer" | sed '1d')"
    phonetic="$(sed -n '/<span class="text-muted">/s/.*>\(\/.*\/\)<.*/\1/p' "$buffer")"
    exact_match="$(sed -n '/translation-index/,+4p' "$buffer" | grep '<strong>' | awk '{print $2}')"
    plural="$(sed -n '/class="d-inline-block"/s/.*:\s*\(.*\)\].*/\1/p' "$buffer" | sed '2d')"
    possessive="$(sed -n '/class="d-inline-block"/s/.*:\s*\(.*\)\].*/\1/p' "$buffer" | sed '1d')"

    echo "$exact_match"
    echo
    echo -e "\e[1m${noun}\e[0m $phonetic \e[2;3mnomen\e[0m"
    [ -n "${plural}" ] && echo -e "${plural} \e[2;3mplural\e[0m"
    [ -n "${possessive}" ] && echo -e "${possessive} \e[2;3mpossessiv\e[0m"
}

lookup_verb() {
    local verb
    local past
    local perfect
    local tokens
    local phonetic
    local exact_match
    local exact_match

    verb="$(sed -n '/entity-anchor/,+1s/\s*\(.*\)\s*/\1/p' "$buffer" | sed '1d')"
    phonetic="$(sed -n '/<span class="text-muted">/s/.*>\(\/.*\/\)<.*/\1/p' "$buffer")"
    exact_match="$(sed -n '/translation-index/,+4p' "$buffer" | grep '<strong>' | awk '{print $2}')"
    tokens="$(grep -A3 'd-inline-block my-0' "$buffer" | xargs | sed 's|\s*</span>\s*|\n|g' | sed 's|.*\[.*:\s*\(.*\)\s*\].*|\1|' | uniq)"
    past="$(sed -n '1p' <<< "$tokens")"
    perfect="$(sed -n '3p' <<< "$tokens")$(sed -n '2p' <<< "$tokens")"

    echo "$exact_match"
    echo
    echo -e "\e[1m${verb}\e[0m $phonetic \e[2;3mverben\e[0m"
    [ -n "${past}" ] && echo -e "${past} \e[2;3mpräteritum\e[0m"
    [ -n "${perfect}" ] && echo -e "${perfect} \e[2;3mperfekt\e[0m"
}

lookup_adverb() {
    local adverb
    local phonetic
    local exact_match
    local exact_match

    adverb="$(sed -n '/entity-anchor/,+1s/\s*\(.*\)\s*/\1/p' "$buffer" | sed '1d')"
    phonetic="$(sed -n '/<span class="text-muted">/s/.*>\(\/.*\/\)<.*/\1/p' "$buffer")"
    exact_match="$(sed -n '/translation-index/,+4p' "$buffer" | grep '<strong>' | awk '{print $2}')"

    echo "$exact_match"
    echo
    echo -e "\e[1m${adverb}\e[0m $phonetic \e[2;3madverb\e[0m"
}

lookup_adjective() {
    local adjective
    local phonetic
    local exact_match
    local exact_match

    adjective="$(sed -n '/entity-anchor/,+1s/\s*\(.*\)\s*/\1/p' "$buffer" | sed '1d')"
    phonetic="$(sed -n '/<span class="text-muted">/s/.*>\(\/.*\/\)<.*/\1/p' "$buffer")"
    exact_match="$(sed -n '/translation-index/,+4p' "$buffer" | grep '<strong>' | awk '{print $2}')"

    echo "$exact_match"
    echo
    echo -e "\e[1m${adjective}\e[0m $phonetic \e[2;3madjektiv\e[0m"
}

save_practice() {
    read -rp "Section: " section
    read -rp "Task: " task
    read -rp "Question: " question
    read -rp "Answer: " answer

    if [ -n "$section" ] && [ -n "$task" ] && [ -n "$question" ] && [ -n "$answer" ]
    then
        echo "${section}::${task}::${question}::${answer}" >> "${practices}"
        echo -e "\e[1;31mPractice saved\e[0m" >&2
    else
        echo -e "\e[1;31mPractice incomplete\e[0m" >&2
    fi
}

save_grammar() {
    local temp
    local title
    local section
    local filename

    temp="$(mktemp)"

    if read -rp "Section: " section && $EDITOR "$temp"
    then
        filename="$grammars/${section}"

        read -rp "Grammar title: " title

        [ -d "$grammars" ] || mkdir -p "$grammars"

        if ! [ -f "$filename" ]
        then
            echo -e "${title}\n" > "$filename"
            cat "$temp" >> "$filename"
            echo -e "\e[1;31mGrammar saved: cache $temp\e[0m" >&2
        else
            echo -e "\e[1;31mGrammar name already reserved: cached $temp\e[0m" >&2
        fi
    else
        echo -e "\e[1;31mGrammar could not be saved: cached $temp\e[0m" >&2
    fi
}

prompt_user() {
    local record="$1"
    local task
    local question
    local answer
    local response
    local errno
    local screen_width=0
    local pad_width=0
    local string_width=0

    task="$(awk -F'::' '{print $2}' <<< "$record")"
    question="$(awk -F'::' '{print $3}' <<< "$record")"
    answer="$(awk -F'::' '{print $4}' <<< "$record")"

    screen_width="$(tput cols)"
    string_width="$(wc -c <<< "$task")"
    pad_width=$((screen_width - string_width))

    printf "\e[1;7;35m%*s%s%*s\e[0m\n" "1" ' ' "$task" "$pad_width" ' '
    echo
    echo -e "\e[1;34m${question}\e[0m"
    echo -e "\e[1;33m"
    read -rp "Answer: " response
    echo -ne "\e[0m"

    if [ "$response" == "$answer" ]
    then
        errno=0
    else
        echo -e "\n\e[1;31m${answer}\e[0m\n"
        errno=1
    fi

    return $errno
}

process_grammar() {
    local section="$1"
    local grammar_path="$2"
    local -a records
    local record_index
    local screen_width=0
    local pad_width=0
    local string_width=0
    local prompt="Press ^M to move forward"

    readarray -t records < <(awk -F'::' -v section="$section" '$1 == section {print $0}' "$practices")

    for record_index in $(random_sequence "${#records[*]}")
    do
        screen_width="$(tput cols)"
        string_width="$(wc -c <<< "$section")"
        pad_width=$((screen_width / 2 - string_width / 2))
        width="$(get_max_line_width "$grammar_path")"

        clear
        printf "\e[1;7;33m%*s%s%*s\e[0m" "$pad_width" ' ' "$section" "$pad_width" ' '
        echo -e "\n\e[3;2;37m"
        cat "$grammar_path"
        echo -e "\e[0m\n"

        if prompt_user "${records[$record_index]}"
        then
            echo -e "\n\e[1;32mCorrect\e[0m\n"

            screen_width="$(tput cols)"
            string_width="$(wc -c <<< "$prompt")"
            pad_width=$((screen_width / 2 - string_width / 2))

            printf "\e[1;7;36m%*s%s%*s\e[0m" "$pad_width" ' ' "$prompt" "$pad_width" ' '
            read -r </dev/tty
            break
        else
            screen_width="$(tput cols)"
            string_width="$(wc -c <<< "$prompt")"
            pad_width=$((screen_width / 2 - string_width / 2))

            printf "\e[1;7;36m%*s%s%*s\e[0m" "$pad_width" ' ' "$prompt" "$pad_width" ' '
            read -r </dev/tty
        fi
    done

    if [ "${#records[*]}" -eq 0 ]
    then
        screen_width="$(tput cols)"
        string_width="$(wc -c <<< "$section")"
        pad_width=$((screen_width / 2 - string_width / 2))
        width="$(get_max_line_width "$grammar_path")"

        clear
        printf "\e[1;7;33m%*s%s%*s\e[0m" "$pad_width" ' ' "$section" "$pad_width" ' '
        echo -e "\n\e[3;2;37m"
        cat "$grammar_path"
        echo
        printf "%0.s-" $(seq 0 "$width")
        echo -e "\e[0m\n"

        screen_width="$(tput cols)"
        string_width="$(wc -c <<< "$prompt")"
        pad_width=$((screen_width / 2 - string_width / 2))

        echo -e "\e[1;31mNo practices found for this grammar.\e[0m\n"
        printf "\e[1;7;36m%*s%s%*s\e[0m" "$pad_width" ' ' "$prompt" "$pad_width" ' '
        read -r </dev/tty
        echo -e "\e[0m"
        return 1
    fi
}

get_max_line_width() {
    local file_path="$1"
    local max_width=0
    local width
    local line

    while read -r line
    do
        width="$(wc -c <<< "$line")"
        [ "$width" -gt "$max_width" ] && max_width="$width"
    done < "$file_path"

    echo "$width"
}

start_review() {
    local grammar_path
    local section
    local width
    local screen_width=0
    local pad_width=0
    local string_width=0

    for grammar_path in "$grammars"/*
    do
        section="$(basename "$grammar_path")"

        process_grammar "$section" "$grammar_path"
    done
}

if [ "$1" == "save" ] && [ $# -eq 2 ]
then
    [ -d "$share" ] || mkdir -p "$share"
    grep -iqw "$2" "$keywords" || echo "$2" >> "$keywords"
    echo -e "\e[1;31mKeyword saved\e[0m" >&2
elif [ "$1" == "save" ]
then
    shift
    [ -d "$share" ] || mkdir -p "$share"
    grep -q "$*" "$notefile" || echo "$*" >> "$notefile"
    echo -e "\e[1;31mSentence saved\e[0m" >&2
elif [ "$1" == "practice" ]
then
    save_practice
elif [ "$1" == "grammar" ]
then
    save_grammar
elif [ "$1" == "review" ]
then
    start_review
elif [ "$1" == "diff" ]
then
    awk -F'::' '{print $1}' "$practices" | sort | uniq > /tmp/practice.lst
    ls -1 "$grammars" > /tmp/grammar.lst

    diff /tmp/practice.lst /tmp/grammar.lst | \
        sed -e 's/^</missing grammar for/' -e 's/^>/missing practice for/' | \
        sed '/^[0-9-]/d' | sort
elif [ "$1" == "list" ]
then
    awk -F'::' '{print $1}' "$practices" | sort | uniq
else
    curl -L -s "https://dic.b-amooz.com/de/dictionary/w?word=$keyword" --compressed \
        -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9' \
        -H 'Accept-Language: en-US,en;q=0.5' \
        -H 'Accept-Encoding: gzip, deflate, br' \
        -H 'Connection: keep-alive' \
        -H 'Upgrade-Insecure-Requests: 1' > "$buffer"

    word_type_fa="$(sed -n '/part-of-speech/,+1s/.*\[\(.*\)\].*/\1/p' "$buffer" | sed -n '1p')"

    case "$word_type_fa" in
        "اسم") lookup_noun ;;
        "فعل") lookup_verb ;;
        "صفت") lookup_adjective ;;
        "قید") lookup_adverb ;;
    esac
fi

rm "$buffer"
